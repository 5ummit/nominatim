{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"kind":"class","name":"List","id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    List<int> fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error\n    fixedLengthList.add(499);    // Error\n    fixedLengthList[0] = 87;\n    List<int> growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.\n\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an `Iterable` that is backed by the list, will\nbreak the iteration.\n","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"128"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"134"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current length, entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"151"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    // Sort from shortest to longest.\n    numbers.sort((x, y) => x.length.compareTo(y.length));\n    numbers.join(', '); // 'one, two, four, three'\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n\n    List<int> nums = [13, 2, -11];\n    nums.sort();\n         nums.join(', '); // '-11, 2, 13'\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/core/list.dart","line":"191"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/core/list.dart","line":"191"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"191"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"\nShuffles the elements of this list randomly.\n","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"196"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the end of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.indexOf('re');    // 1\n    notes.indexOf('re', 2); // 3\n\nReturns -1 if [element] is not found.\n\n    notes.indexOf('fa');    // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"213"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.lastIndexOf('re', 2); // 1\n\nIf [start] is not provided, this method searches from the end of the\nlist./Returns\n\n    notes.lastIndexOf('re');  // 3\n\nReturns -1 if [element] is not found.\n\n    notes.lastIndexOf('fa');  // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this\nis a fixed-length list.\n","line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"}],"line":"255"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"266"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\n    List<String> list = ['a', 'b', 'c'];\n    list.setAll(1, ['bee', 'sea']);\n    list.join(', '); // 'a, bee, sea'\n\nThis operation does not increase the length of `this`.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn error occurs if the [iterable] is longer than [length] - [index].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"281"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the first occurence of [value] from this list.\n\nReturns true if [value] was in the list, false otherwise.\n\n    List<String> parts = ['head', 'shoulders', 'knees', 'toes'];\n    parts.remove('head'); // true\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nThe method has no effect if [value] was not in the list.\n\n    // Note: 'head' has already been removed.\n    parts.remove('head'); // false\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"300"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\n* Throws an [ArgumentError] if [index] is not an [int].\n* Throws a [RangeError] if the [index] is out of range for this list.\n* Throws an [UnsupportedError], and doesn't remove the object,\nif this is a fixed-length list.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"315"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","line":"322"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.removeWhere((item) => item.length == 3);\n    numbers.join(', '); // 'three, four'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"335"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.retainWhere((item) => item.length == 3);\n    numbers.join(', '); // 'one, two'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"348"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"348"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\nReturns a new list containing the objects from [start] inclusive to [end]\nexclusive.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    colors.sublist(1, 3); // ['green', 'blue']\n\nIf [end] is omitted, the [length] of `this` is used.\n\n    colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"364"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"getRange","id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    Iterable<String> range = colors.getRange(1, 4);\n    range.join(', ');  // 'green, blue, orange'\n    colors.length = 3;\n    range.join(', ');  // 'green, blue'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"383"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start] inclusive to [end] exclusive of `this`.\n\n    List<int> list1 = [1, 2, 3, 4];\n    List<int> list2 = [5, 6, 7, 8, 9];\n    // Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n    // of list1.\n    list1.setRange(1, 3, list2, 3);\n    list1.join(', '); // '1, 8, 9, 4'\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nAn error occurs if the [iterable] does not have enough objects after\nskipping [skipCount] objects.\n\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"404"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"412"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"420"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand replaces them with the contents of the [iterable].\n\n    List<int> list = [1, 2, 3, 4];\n    list.replaceRange(1, 3, [6, 7]);\n    list.join(', '); // '1, 6, 7, 4'\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"432"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n\n    List<String> words = ['fee', 'fi', 'fo', 'fum'];\n    Map<int, String> map = words.asMap();\n    map[0] + map[1];   // 'feefi';\n    map.keys.toList(); // [0, 1, 2, 3]\n","line":"446"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","line":"141"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","line":"172"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a list of the given length.\n\nThe created list is fixed-length if [length] is provided.\n\n    List fixedLengthList = new List(3);\n    fixedLengthList.length;     // 3\n    fixedLengthList.length = 1; // Error\n\n\nThe list has length 0 and is growable if [length] is omitted.\n\n    List growableList = new List();\n    growableList.length; // 0;\n    growableList.length = 3;\n\nThe [length] must not be negative or null, if it is provided.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"65"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"filled","id":"filled2()","comment":"\nCreates a fixed-length list of the given length, and initializes the\nvalue at each position with [fill]:\n\n    new List<int>.filled(3, 0); // [0, 0, 0]\n\nThe [length] must not be negative or null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"fill","id":"fill"}],"line":"75"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"from","id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"85"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"generate","id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with [length] positions and fills it with values created by\ncalling [generator] for each index in the range `0` .. `length - 1`\nin increasing order.\n\n    new List<int>.generate(3, (int index) => index * index); // [0, 1, 4]\n\nThe created list is fixed-length unless [growable] is true.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable","line":"111"}],"line":"110"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/list.dart","line":"46"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]}],"kind":"class","name":"ListMixin","id":"ListMixin","comment":"\nBase implementation of a [List] class.\n\nThis class can be used as a mixin.\n\nThis implements all read operations using only the `length` and\n`operator[]` members. It implements write operations using those and\n`length=` and `operator[]=`\n","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"64"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"86"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"97"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"97"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"123"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"144"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"173"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"173"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"177"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"177"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"180"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"180"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"180"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"189"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"189"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"189"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"201"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"203"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"203"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"213"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"226"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"239"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"256"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"256"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"260"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"260"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_filter","id":"_filter3()","children":[{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"265"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"265"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainMatching","id":"retainMatching","line":"266"}],"isPrivate":true,"line":"264"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"284"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"288"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"297"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"297"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"297"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"305"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"330"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"341"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"346"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"353"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"360"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"392"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"418"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"438"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"457"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"474"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"481"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"497"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"509"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"46"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"48"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"53"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"58"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"507"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ListMixin","refId":"dart.collection/ListMixin","arguments":[{"name":"E","refId":"dart.collection/ListBase/E"}]}],"kind":"class","name":"ListBase","id":"ListBase","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"64"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"86"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"97"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"97"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"123"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"144"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"173"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"173"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"177"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"177"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"180"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"180"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"180"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"189"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"189"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"189"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"201"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"203"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"203"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"213"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"226"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"239"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"256"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"256"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"260"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"260"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"284"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"288"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"297"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"297"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"297"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"305"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"330"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"341"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"346"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"353"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"360"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"392"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"418"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"438"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"457"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"474"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"481"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"497"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"509"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"46"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"48"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"53"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"58"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"507"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"16"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"},{"kind":"library","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EfficientLength","id":"EfficientLength","comment":"\nMarker interface for [Iterable] subclasses that have an efficient\n[length] implementation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in the iterable.\n\nThis is an efficient operation that doesn't require iterating through\nthe elements.\n","line":"18"}],"uri":"dart-sdk/lib/_collection_dev/iterable.dart","line":"11"}],"uri":"dart-sdk/lib/_collection_dev/collection_dev.dart","line":"5"}],"kind":"library","name":"package:xml/xml.dart","id":"xml_utils_prujohn","children":[{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlNamespace","id":"XmlNamespace","comment":"\r\nRepresents an namespace declaration of an XML element.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"7"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"uri","id":"uri","line":"8"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"xml_utils_prujohn/XmlNamespace/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"uri","refId":"xml_utils_prujohn/XmlNamespace/uri"},"kind":"param","name":"uri","id":"uri"}],"line":"10"}],"uri":"package:xml/src/xml_namespace.dart","line":"6"},{"superclass":{"name":"ListBase","refId":"dart.collection/ListBase","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"class","name":"XmlCollection","id":"XmlCollection","comment":"\r\nRepresents a queryable collection of [XmlNode] elements.\n","children":[{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\r\nReturns the element at the given [index] in the list or throws\nan [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"19"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\r\nSets the entry at the given [index] in the list to [value].\nThrows an [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value"}],"line":"25"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\r\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:]. Throws\nan [UnsupportedError] if the list is not extendable.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"36"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addLast","id":"addLast1()","comment":"\r\nAdds value at the end of the list, extending the length by one. Throws\nan UnsupportedError if the list is not extendable.\n\nDeprecated: Use add instead.\n","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value"}],"line":"46"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\r\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n","children":[{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"param","name":"value","id":"value"}],"line":"53"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\r\nAppends all elements of the [iterable] to the end of this list.\nExtends the length of the list by the number of elements in [iterable].\nThrows an [UnsupportedError] if this list is not extensible.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"60"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\r\nReturns a new list containing the elemenst from [start] to [end].\n\nIf [end] is omitted, the [length] of the list is used.\n\nIt is an error if [start] or [end] are not list indices for this list,\nor if [end] is before [start].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"70"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\r\nSorts the list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\nThe default [List] implementations use [Comparable.compare] if\n[compare] is omitted.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"a","id":"a","uri":"package:xml/src/xml_collection.dart","line":"88"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"b","id":"b","uri":"package:xml/src/xml_collection.dart","line":"88"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"88"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\r\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"102"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"102"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\r\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"113"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"113"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\r\nReturns an unmodifiable Map view of this.\n\nIt has the indices of this list as keys, and the corresponding elements\nas values.\n","line":"121"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\r\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"131"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\r\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nIf start is not provided, it defaults to [:this.length - 1:] .\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"143"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\r\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n","line":"153"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\r\nRemoves the element at position[index] from the list.\n\nThis reduces the length of the list by one and moves all later elements\ndown by one position.\nReturns the removed element.\nThrows an [ArgumentError] if [index] is not an [int].\nThrows an [RangeError] if the [index] does not point inside\nthe list.\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of the list cannot be changed.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"169"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\r\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n","line":"176"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\r\nCopies [length] elements of [from], starting\nat [startFrom], into the list, starting at [start].\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length - 1:] are out of range for [:this:], or if\n[startFrom] or [:startFrom + length - 1:] are out of range for [from].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"from","id":"from"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startFrom","id":"startFrom"}],"line":"187"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\r\nRemoves [length] elements from the list, beginning at [start].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length: - 1] are out of range.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"}],"line":"200"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertRange","id":"insertRange3()","comment":"\r\nInserts a new range into the list, starting from [start] to\n[:start + length - 1:]. The entries are filled with [fill].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nIf [start] is the length of the list, this method inserts the\nrange at the end of the list.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] is negative or if\n[start] is greater than the length of the list.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"216"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\r\nAdds an element to this collection.\n\n\r\nAdds all of [elements] to this collection.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n\n\r\nRemoves an instance of [element] from this collection.\n\nThis removes only one instance of the element for collections that can\ncontain the same element more than once (e.g., [List]). Which instance\nis removed is decided by the collection.\n\nHas no effect if the elements is not in this collection.\n","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","comment":"\r\nRemoves all of [elements] from this collection.\n\nEquivalent to calling [remove] once for each element in\n[elements], but may be faster for some collections.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"}],"line":"253"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll1()","comment":"\r\nRemoves all elements of this collection that are not\nin [elements].\n\nFor [Set]s, this is the intersection of the two original sets.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"elements","id":"elements"}],"line":"265"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\r\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"286"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"286"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\r\nCheck whether the collection contains an element equal to [element].\n","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element"}],"line":"291"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\r\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"296"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"296"},{"kind":"method","name":"fold","id":"fold2()","comment":"\r\nFold a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of a collection:\n\n  collection.fold(0, (prev, element) => prev + element);\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"package:xml/src/xml_collection.dart","line":"311"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"311"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"311"}],"line":"310"},{"kind":"method","name":"reduce","id":"reduce1()","comment":"\r\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"package:xml/src/xml_collection.dart","line":"323"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"323"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"323"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\r\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"330"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"330"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\r\nConvert each element to a [String] and concatenate the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"339"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\r\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"345"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"345"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"347"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"348"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\r\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"361"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\r\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value","uri":"package:xml/src/xml_collection.dart","line":"372"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"372"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\r\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"380"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\r\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value","uri":"package:xml/src/xml_collection.dart","line":"391"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"391"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\r\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"425"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\r\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value","uri":"package:xml/src/xml_collection.dart","line":"434"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"434"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\r\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value","uri":"package:xml/src/xml_collection.dart","line":"444"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"444"},{"returnType":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\r\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"value","id":"value","uri":"package:xml/src/xml_collection.dart","line":"451"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"451"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\r\nRemoves all elements of this collection that satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"458"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"458"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\r\nRemoves all elements of this collection that fail to satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element","uri":"package:xml/src/xml_collection.dart","line":"465"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"465"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\r\nInserts the element at position [index] in the list.\n\nThis increases the length of the list by one and shifts all later elements\ntowards the end of the list.\n\nIt is an error if the [index] does not point inside the list or at the\nposition after the last element.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"param","name":"element","id":"element"}],"line":"476"},{"returnType":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"}]},"kind":"method","name":"allElements","id":"allElements0()","line":"553"},{"returnType":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"query","id":"query1()","comment":"\r\nReturns the first node in the tree that matches the given [queryOn]\nparameter.\n\n## Usage ##\n* query('tagName') // returns first occurance matching tag name.\n* query(XmlNodeType.CDATA) // returns first occurance of element matching\nthe given node type (CDATA node in this example).\n* query({'attributeName':'attributeValue'}) // returns the first occurance\nof any [XmlElement] where the given attributes/values are found.\n","children":[{"kind":"param","name":"queryOn","id":"queryOn"}],"line":"567"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAttributeInternal","id":"_queryAttributeInternal3()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"aMap","id":"aMap"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list","line":"592"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"n","id":"n","line":"593"}],"isPrivate":true,"line":"591"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryNodeTypeInternal","id":"_queryNodeTypeInternal3()","children":[{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"kind":"param","name":"nodeType","id":"nodeType"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list","line":"626"},{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"param","name":"node","id":"node","line":"627"}],"isPrivate":true,"line":"625"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryNameInternal","id":"_queryNameInternal3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"tagName","id":"tagName"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"element","id":"element","line":"650"}],"isPrivate":true,"line":"649"},{"returnType":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"method","name":"queryAll","id":"queryAll1()","comment":"\r\nReturns a list of nodes in the tree that match the given [queryOn]\nparameter.\n\n## Usage ##\n* query('tagName') = returns first occurance matching tag name.\n* query(XmlNodeType.CDATA) // returns first occurance of element matching\nthe given node type (CDATA node in this example).\n","children":[{"kind":"param","name":"queryOn","id":"queryOn"}],"line":"676"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAllAttributesInternal","id":"_queryAllAttributesInternal3()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"aMap","id":"aMap"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list","line":"697"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"element","id":"element","line":"698"}],"isPrivate":true,"line":"696"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAllNodeTypesInternal","id":"_queryAllNodeTypesInternal3()","children":[{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"kind":"param","name":"nodeType","id":"nodeType"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list","line":"729"},{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"param","name":"node","id":"node","line":"730"}],"isPrivate":true,"line":"728"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAllNamesInternal","id":"_queryAllNamesInternal3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"tagName","id":"tagName"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"list","id":"list","line":"750"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"element","id":"element","line":"751"}],"isPrivate":true,"line":"749"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"29"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\r\nReturns a reversed fixed-length view of this [List].\n\nThe reversed list has elements in the opposite order of this list.\nIt is backed by this list, but will stop working if this list\nbecomes shorter than its current length.\n","line":"79"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\r\nReturns an [Iterator] that iterates over this [Iterable] object.\n","line":"274"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\r\nReturns true if there is no element in this collection.\n","line":"353"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"property","name":"first","id":"first","comment":"\r\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"399"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"property","name":"last","id":"last","comment":"\r\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","line":"406"},{"ref":{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"},"kind":"property","name":"single","id":"single","comment":"\r\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"413"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"isFinal":true,"kind":"variable","name":"_collection","id":"_collection","isPrivate":true,"line":"7"},{"kind":"constructor","name":"_internal","id":"_internal0()","isPrivate":true,"line":"9"},{"kind":"constructor","name":"_from","id":"_from1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"xml_utils_prujohn/XmlCollection/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"isPrivate":true,"line":"11"},{"upperBound":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"typeparam","name":"E","id":"E"}],"uri":"package:xml/src/xml_collection.dart","line":"6"},{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlProcessingInstruction","id":"XmlProcessingInstruction","comment":"Represents and XML Processing Instruction (PI) node. ","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"10"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"text","id":"text","line":"5"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"text","refId":"xml_utils_prujohn/XmlProcessingInstruction/text"},"kind":"param","name":"text","id":"text"}],"line":"7"}],"uri":"package:xml/src/xml_processing_instruction.dart"},{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlCDATA","id":"XmlCDATA","comment":"\r\nRepresents a CDATA node of an XML tree.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"text","id":"text","line":"8"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"text","refId":"xml_utils_prujohn/XmlCDATA/text"},"kind":"param","name":"text","id":"text"}],"line":"10"}],"uri":"package:xml/src/xml_cdata.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"XmlException","id":"XmlException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"msg","id":"msg","line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"debugXml","id":"debugXml","line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"errorLocation","id":"errorLocation","line":"6"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"msg","refId":"xml_utils_prujohn/XmlException/msg"},"kind":"param","name":"msg","id":"msg"}],"line":"8"},{"kind":"constructor","name":"withDebug","id":"withDebug3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"msg","refId":"xml_utils_prujohn/XmlException/msg"},"kind":"param","name":"msg","id":"msg"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"debugXml","refId":"xml_utils_prujohn/XmlException/debugXml"},"kind":"param","name":"debugXml","id":"debugXml"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"errorLocation","refId":"xml_utils_prujohn/XmlException/errorLocation"},"kind":"param","name":"errorLocation","id":"errorLocation"}],"line":"12"}],"uri":"package:xml/src/xml_exception.dart","line":"3"},{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlAttribute","id":"XmlAttribute","comment":"\r\nRepresents an attribute component of an XML element.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"15"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"8"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"value","id":"value","line":"9"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"xml_utils_prujohn/XmlAttribute/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"value","refId":"xml_utils_prujohn/XmlAttribute/value"},"kind":"param","name":"value","id":"value"}],"line":"11"}],"uri":"package:xml/src/xml_attribute.dart","line":"6"},{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlText","id":"XmlText","comment":"\r\nRepresents a text node component of XML.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"12"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"text","id":"text","line":"7"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"text","refId":"xml_utils_prujohn/XmlText/text"},"kind":"param","name":"text","id":"text"}],"line":"9"}],"uri":"package:xml/src/xml_text.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XmlNodeType","id":"XmlNodeType","comment":"\r\nEnumerates [XmlNode] types.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"18"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_type","id":"_type","isPrivate":true,"line":"7"},{"isStatic":true,"kind":"variable","name":"Element","id":"Element","line":"11"},{"isStatic":true,"kind":"variable","name":"Attribute","id":"Attribute","line":"12"},{"isStatic":true,"kind":"variable","name":"Text","id":"Text","line":"13"},{"isStatic":true,"kind":"variable","name":"Namespace","id":"Namespace","line":"14"},{"isStatic":true,"kind":"variable","name":"CDATA","id":"CDATA","line":"15"},{"isStatic":true,"kind":"variable","name":"PI","id":"PI","line":"16"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_type","refId":"xml_utils_prujohn/XmlNodeType/_type"},"kind":"param","name":"_type","id":"_type","isPrivate":true}],"line":"9"}],"uri":"package:xml/src/xml_node_type.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XmlNode","id":"XmlNode","comment":"\r\nRepresents a base class for XML nodes.  This node is essentially\nread-only.  Use [XmlElement] for manipulating attributes\nand heirarchies.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"remove","id":"remove0()","line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"Returns a text representation of the XmlNode tree.","line":"26"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_stringifyInternal","id":"_stringifyInternal4()","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"b","id":"b","line":"33"},{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"param","name":"n","id":"n","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"indent","id":"indent","line":"33"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"leadingWhiteSpace","id":"leadingWhiteSpace","line":"34"}],"isPrivate":true,"line":"32"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_space","id":"_space1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"amount","id":"amount"}],"isPrivate":true,"line":"89"},{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"isFinal":true,"kind":"variable","name":"type","id":"type","line":"9"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"variable","name":"parent","id":"parent","line":"10"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"initializedField":{"name":"type","refId":"xml_utils_prujohn/XmlNode/type"},"kind":"param","name":"type","id":"type"}],"line":"12"}],"uri":"package:xml/src/xml_node.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XmlToken","id":"XmlToken","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"442"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toStringLiteral","id":"toStringLiteral0()","line":"483"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"LT","id":"LT","line":"404"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"GT","id":"GT","line":"405"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"QUESTION","id":"QUESTION","line":"406"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STRING","id":"STRING","line":"407"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"BANG","id":"BANG","line":"408"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"COLON","id":"COLON","line":"409"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SLASH","id":"SLASH","line":"410"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"EQ","id":"EQ","line":"411"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"QUOTE","id":"QUOTE","line":"412"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"IGNORE","id":"IGNORE","line":"413"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"DASH","id":"DASH","line":"414"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"START_COMMENT","id":"START_COMMENT","line":"415"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"END_COMMENT","id":"END_COMMENT","line":"416"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"START_CDATA","id":"START_CDATA","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"END_CDATA","id":"END_CDATA","line":"418"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"START_PI","id":"START_PI","line":"419"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"END_PI","id":"END_PI","line":"420"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NAMESPACE","id":"NAMESPACE","line":"421"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"kind","id":"kind","line":"423"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"quoteKind","id":"quoteKind","line":"424"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_str","id":"_str","isPrivate":true,"line":"425"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_location","id":"_location","isPrivate":true,"line":"426"},{"kind":"constructor","name":"_internal","id":"_internal3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"kind","refId":"xml_utils_prujohn/XmlToken/kind"},"kind":"param","name":"kind","id":"kind"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_str","refId":"xml_utils_prujohn/XmlToken/_str"},"kind":"param","name":"_str","id":"_str","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"quoteKind","refId":"xml_utils_prujohn/XmlToken/quoteKind"},"kind":"param","name":"quoteKind","id":"quoteKind"}],"isPrivate":true,"line":"428"},{"returnType":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"constructor","name":"string","id":"string1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"430"},{"returnType":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"constructor","name":"quote","id":"quote1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"quoteKind","id":"quoteKind"}],"line":"434"},{"returnType":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"kind","id":"kind"}],"line":"438"}],"uri":"package:xml/src/xml_tokenizer.dart","line":"403"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XmlTokenizer","id":"XmlTokenizer","comment":"\r\nReturns tokenized parts of Xml document.\n","children":[{"returnType":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"method","name":"next","id":"next0()","comment":"\r\nReturns the next token, or null if no tokens are available.\n","line":"56"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOfToken","id":"indexOfToken2()","comment":"\r\nReturns -1 if the token is not found, otherwise returns the index of\nthe first instance of the token in the token sequence.\n","children":[{"ref":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"param","name":"token","id":"token"},{"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"start","id":"start"}],"line":"70"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"lookAheadMatch","id":"lookAheadMatch3()","comment":"\r\nPerforms a non-destructive look-ahead in the token list and tries to match\nthe given [sequence] of tokens.\n\nSearch will continue until the end of the token list, or until optional\n[until] sequence of tokens is found.\n\nSearch begins at [index] = 0 unless otherwise specified.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"}]},"kind":"param","name":"sequence","id":"sequence"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"}]},"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"until","id":"until","line":"109"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"index","id":"index","line":"109"}],"line":"108"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_sequenceMatch","id":"_sequenceMatch3()","comment":"\r\n-1 if not found, otherwise returns start index of matching sequence\nin _tokenized. No boundary checks.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"}]},"kind":"param","name":"sequence","id":"sequence"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"until","id":"until"}],"isPrivate":true,"line":"138"},{"returnType":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"method","name":"_next","id":"_next0()","isPrivate":true,"line":"152"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"388"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isReserved","id":"isReserved1()","comment":"\r\nReturns true if the charCode is one of the special reserved\ncharCodes\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"c","id":"c"}],"line":"394"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isWhitespace","id":"isWhitespace1()","comment":"\r\nReturns true if the charCode is considered to be whitespace.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"c","id":"c"}],"line":"399"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"lastTokenIndex","id":"lastTokenIndex","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"TAB","id":"TAB","line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NEW_LINE","id":"NEW_LINE","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CARRIAGE_RETURN","id":"CARRIAGE_RETURN","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SPACE","id":"SPACE","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"QUOTE","id":"QUOTE","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SQUOTE","id":"SQUOTE","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SLASH","id":"SLASH","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"COLON","id":"COLON","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"LT","id":"LT","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"GT","id":"GT","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"EQ","id":"EQ","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"Q","id":"Q","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"B","id":"B","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"DASH","id":"DASH","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"RBRACK","id":"RBRACK","line":"21"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"variable","name":"ERR_UNEXPECTED_END","id":"ERR_UNEXPECTED_END","line":"23"},{"ref":{"name":"List","refId":"dart.core/List"},"isStatic":true,"kind":"variable","name":"_reserved","id":"_reserved","isPrivate":true,"line":"25"},{"ref":{"name":"List","refId":"dart.core/List"},"isStatic":true,"kind":"variable","name":"_whiteSpace","id":"_whiteSpace","isPrivate":true,"line":"28"},{"isStatic":true,"kind":"variable","name":"_specialTags","id":"_specialTags","isPrivate":true,"line":"30"},{"ref":{"name":"ListQueue","refId":"dart.collection/ListQueue","arguments":[{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"}]},"isFinal":true,"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"32"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"}]},"isFinal":true,"kind":"variable","name":"_tokenized","id":"_tokenized","isPrivate":true,"line":"33"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_xml","id":"_xml","isPrivate":true,"line":"34"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_length","id":"_length","isPrivate":true,"line":"35"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_i","id":"_i","isPrivate":true,"line":"36"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_index","id":"_index","isPrivate":true,"line":"37"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isInTag","id":"_isInTag","isPrivate":true,"line":"38"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_xml","refId":"xml_utils_prujohn/XmlTokenizer/_xml"},"kind":"param","name":"_xml","id":"_xml","isPrivate":true}],"line":"42"}],"uri":"package:xml/src/xml_tokenizer.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XmlParser","id":"XmlParser","comment":"\r\n## XML Parser ##\n\n### When _withQuirks == true: ###\n* Allows optional attribute quotes for single string values\n","children":[{"returnType":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"isStatic":true,"kind":"method","name":"_parse","id":"_parse2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"xml","id":"xml"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"withQuirks","id":"withQuirks"}],"isPrivate":true,"line":"15"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_parseElement","id":"_parseElement1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"31"},{"kind":"method","name":"_parsePI","id":"_parsePI1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"69"},{"kind":"method","name":"_parseCDATA","id":"_parseCDATA1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"92"},{"kind":"method","name":"_parseComment","id":"_parseComment1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"110"},{"kind":"method","name":"_parseTag","id":"_parseTag1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"119"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_parseTextNode","id":"_parseTextNode2()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"isPrivate":true,"line":"246"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_parseNamespace","id":"_parseNamespace1()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"}],"isPrivate":true,"line":"294"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_parseAttribute","id":"_parseAttribute2()","children":[{"ref":{"name":"XmlTokenizer","refId":"xml_utils_prujohn/XmlTokenizer"},"kind":"param","name":"t","id":"t"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"attributeName","id":"attributeName"}],"isPrivate":true,"line":"356"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_push","id":"_push1()","children":[{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"element","id":"element"}],"isPrivate":true,"line":"450"},{"returnType":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"method","name":"_pop","id":"_pop0()","isPrivate":true,"line":"454"},{"returnType":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"method","name":"_peek","id":"_peek0()","isPrivate":true,"line":"458"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_assertKind","id":"_assertKind3()","children":[{"ref":{"name":"XmlToken","refId":"xml_utils_prujohn/XmlToken"},"kind":"param","name":"tok","id":"tok"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"matchID","id":"matchID"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"kind":"param","name":"info","id":"info"}],"isPrivate":true,"line":"460"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_xml","id":"_xml","isPrivate":true,"line":"10"},{"ref":{"name":"ListQueue","refId":"dart.collection/ListQueue","arguments":[{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"}]},"isFinal":true,"kind":"variable","name":"_scopes","id":"_scopes","isPrivate":true,"line":"11"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_withQuirks","id":"_withQuirks","isPrivate":true,"line":"12"},{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"variable","name":"_root","id":"_root","isPrivate":true,"line":"13"},{"kind":"constructor","name":"_internal","id":"_internal2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_xml","refId":"xml_utils_prujohn/XmlParser/_xml"},"kind":"param","name":"_xml","id":"_xml","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_withQuirks","refId":"xml_utils_prujohn/XmlParser/_withQuirks"},"kind":"param","name":"_withQuirks","id":"_withQuirks","isPrivate":true}],"isPrivate":true,"line":"28"}],"uri":"package:xml/src/xml_parser.dart","line":"9"},{"superclass":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"class","name":"XmlElement","id":"XmlElement","comment":"\r\nRepresents an element node of XML.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isNamespaceInScope","id":"isNamespaceInScope1()","comment":"\r\nReturns true if the given [namespace] name is found in the current\nscope of namespaces.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"namespace","id":"namespace"}],"line":"73"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addChild","id":"addChild1()","comment":"\r\nAdds a child [XmlNode] to this [XmlElement].\n","children":[{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"param","name":"element","id":"element"}],"line":"107"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addChildren","id":"addChildren1()","comment":"\r\nAdds a collection of [XmlNode]s to this [XmlElement].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"elements","id":"elements"}],"line":"129"},{"returnType":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"method","name":"query","id":"query1()","comment":"\r\nReturns the first node in the tree that matches the given [queryOn]\nparameter.\n\n## Usage ##\n* query('tagName') // returns first occurance matching tag name.\n* query(XmlNodeType.CDATA) // returns first occurance of element matching\nthe given node type (CDATA node in this example).\n* query({'attributeName':'attributeValue'}) // returns the first occurance\nof any [XmlElement] where the given attributes/values are found.\n","children":[{"kind":"param","name":"queryOn","id":"queryOn"}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAttributeInternal","id":"_queryAttributeInternal2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"aMap","id":"aMap"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list"}],"isPrivate":true,"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryNodeTypeInternal","id":"_queryNodeTypeInternal2()","children":[{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"kind":"param","name":"nodeType","id":"nodeType"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list","line":"192"}],"isPrivate":true,"line":"191"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryNameInternal","id":"_queryNameInternal2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"tagName","id":"tagName"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list"}],"isPrivate":true,"line":"214"},{"returnType":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"method","name":"queryAll","id":"queryAll1()","comment":"\r\nReturns a list of nodes in the tree that match the given [queryOn]\nparameter.\n\n## Usage ##\n* query('tagName') = returns first occurance matching tag name.\n* query(XmlNodeType.CDATA) // returns first occurance of element matching\nthe given node type (CDATA node in this example).\n","children":[{"kind":"param","name":"queryOn","id":"queryOn"}],"line":"240"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAllAttributesInternal","id":"_queryAllAttributesInternal2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"aMap","id":"aMap"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list"}],"isPrivate":true,"line":"254"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_queryAllNodeTypesInternal","id":"_queryAllNodeTypesInternal2()","children":[{"ref":{"name":"XmlNodeType","refId":"xml_utils_prujohn/XmlNodeType"},"kind":"param","name":"nodeType","id":"nodeType"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list"}],"isPrivate":true,"line":"284"},{"kind":"method","name":"_queryAllNamesInternal","id":"_queryAllNamesInternal2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"tagName","id":"tagName"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"param","name":"list","id":"list"}],"isPrivate":true,"line":"303"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"text","id":"text","comment":"\r\nGets a [String] of any text within this [XmlElement].\n","line":"37"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"kind":"property","name":"siblings","id":"siblings","comment":"\r\nGets a collection of siblings related to this [XmlElement].\n","line":"49"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"XmlNamespace","refId":"xml_utils_prujohn/XmlNamespace"}]},"kind":"property","name":"namespacesInScope","id":"namespacesInScope","comment":"\r\nGets a collection of [XmlNamespace]s that are in scope to this\n[XmlElement].\n","line":"55"},{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"property","name":"previousSibling","id":"previousSibling","comment":"\r\nGets the previous sibling to the this [XmlElement], or null if none exists.\n","line":"79"},{"ref":{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"},"kind":"property","name":"nextSibling","id":"nextSibling","comment":"\r\nGets the next sibling adjacent to this [XmlElement], or null if none\nexists.\n","line":"91"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasChildren","id":"hasChildren","comment":"\r\nGets a boolean indicating of this [XmlElement] has any child elements.\n","line":"102"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","line":"7"},{"ref":{"name":"XmlCollection","refId":"xml_utils_prujohn/XmlCollection","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"isFinal":true,"kind":"variable","name":"children","id":"children","comment":"\r\nGets a collection of children under this [XmlElement].\n","line":"12"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"attributes","id":"attributes","comment":"\r\nGets a map of name/value attributue pairs associated with\nthis [XmlElement].\n","line":"19"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"namespaces","id":"namespaces","comment":"\r\nGets a map of name/uri namespace pairs associated with\nthis [XmlElement].\n","line":"25"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"name","refId":"xml_utils_prujohn/XmlElement/name"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"XmlNode","refId":"xml_utils_prujohn/XmlNode"}]},"defaultValue":"const[] ","isOptional":true,"isNamed":true,"kind":"param","name":"elements","id":"elements"}],"line":"29"}],"uri":"package:xml/src/xml_element.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"XML","id":"XML","comment":"\r\nUtility class to work with XML data.\n","children":[{"returnType":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"isStatic":true,"kind":"method","name":"parse","id":"parse2()","comment":"\r\nReturns a [XmlElement] tree representing the raw XML fragment [String].\n\nOptional parameter [withQuirks] will allow the following when set to true:\n\n* Optional quotes for simple attribute values (no spaces).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"xml","id":"xml"},{"defaultValue":"false","isOptional":true,"kind":"param","name":"withQuirks","id":"withQuirks"}],"line":"33"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"stringify","id":"stringify1()","comment":"\r\nReturns a stringified version of an [XmlElement] tree.\nYou can also call .toString() on any [XmlElement].\n","children":[{"ref":{"name":"XmlElement","refId":"xml_utils_prujohn/XmlElement"},"kind":"param","name":"element","id":"element"}],"line":"40"}],"line":"24"}],"uri":"package:xml/xml.dart","line":"4"}